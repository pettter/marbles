The past month and a half has included a trip to Sweden, and visits from
both girlfriend and parents, with the total amount of work done amounting
to some two or three weeks total. Further, the work done has amounted in
part to improductive recollection of the basic principles of Scala
programming and the state of the current implementation.

Apart from that, a proof-of-concept implementation of a 'Splitter' for
bottom-up tree transducers into two top-down tree transducers has been
completed, although with no real graphical interface. However, work on this
has (unsurprisingly) shown a few inconsistencies and weaknesses in the
design chosen. Basically, even moderately involved work will require
mutability and object orientation if performance is not to suffer greatly.

This was shown when the converse splitter for top-down transducers was in
the process of being implemented, as the current implementation of both
kinds of transducers is a purely functional recursive call to the function
applyState, which applies the rule given by the map rules, and applies
nondeterminism through simply trying every combination of subtrees/states
in turn. With trees and tree transducers of even moderate size, this is
unworkable due to memory and processing constraints. (TODO: test this
properly)

Another limitation of the purely functional approach is the difficulties
that arise in showing partially computed trees, as is done in Treebag.

Further, the simplistic approach taken for the top-down case is
insufficient for all top-down tree transducers. Specifically, in every
rule, a single subtree can only be handled by a single state, regardless of
the amount of copies of that subtree in the output tree. Obviously, this is
less powerful than an unrestricted version.

Because of this, I will spend the beginning of the week on rewriting the
transducer logic according to address the above concerns.

